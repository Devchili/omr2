apply plugin: 'com.android.application'

import com.android.build.OutputFile

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    defaultConfig {
        applicationId "com.letssolvetogether.omr.main"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        //versionCode buildVersionCode()
        versionName VERSION_NAME
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets { main { jni.srcDirs = [] } }
    splits {
        abi {
            enable true
            reset()
            include 'arm64-v8a', "armeabi", "armeabi-v7a", "mips", "mips64", "x86", "x86_64"
            universalApk true
        }
    }

    android.applicationVariants.all { variant ->

        // Assigns a different version code for each output APK
        // other than the universal APK.
        variant.outputs.each { output ->

            // Stores the value of ext.abiCodes that is associated with the ABI for this variant.
            def baseAbiVersionCode =
                    // Determines the ABI for this variant and returns the mapped value.
                    ABI_CODES.get(output.getFilter(OutputFile.ABI))

            // Because abiCodes.get() returns null for ABIs that are not mapped by ext.abiCodes,
            // the following code does not override the version code for universal APKs.
            // However, because we want universal APKs to have the lowest version code,
            // this outcome is desirable.
            if (baseAbiVersionCode == null) {
                //for universal APK
                baseAbiVersionCode = 8
            }

            // Assigns the new version code to versionCodeOverride, which changes the version code
            // for only the output APK, not for the variant itself. Skipping this step simply
            // causes Gradle to use the value of variant.versionCode for the APK.

            def (major, minor, patch) = VERSION_NAME.toLowerCase().tokenize('.')
            (major, minor, patch) = [major, minor, patch].collect{it.toInteger()}
            output.versionCodeOverride = (major * 10000) + (minor * 100) + patch
        }
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

dependencies {
    // Room
    implementation "android.arch.persistence.room:runtime:$roomVersion"
    annotationProcessor "android.arch.persistence.room:compiler:$roomVersion"
    implementation "android.arch.lifecycle:viewmodel:$lifecycleVersion"
    implementation "android.arch.lifecycle:extensions:$lifecycleVersion"
    implementation "com.android.support:appcompat-v7:$supportLibraryVersion"
    implementation "com.android.support:support-v4:$supportLibraryVersion"
    implementation "com.android.support:design:$supportLibraryVersion"
    implementation "com.android.support:support-vector-drawable:$supportLibraryVersion"
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support.constraint:constraint-layout:1.1.2'
    testImplementation 'junit:junit:4.12'
    testImplementation "org.robolectric:robolectric:$robolectricVersion"
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation project(':openCVLibrary310')
    implementation (name:"cameralibrary-release-$CAMERA_LIB_VERSION", ext:"aar")
    implementation project(':truetime')
}
